{
	"info": {
		"_postman_id": "safety-management-tests",
		"name": "Safety Management API Tests",
		"description": "Automated test collection for Safety Management System API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/docs",
					"host": ["{{baseUrl}}"],
					"path": ["docs"]
				}
			}
		},
		{
			"name": "Create and Verify Incident",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has incident_id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('incident_id');",
							"    pm.environment.set('createdIncidentId', jsonData.incident_id);",
							"});",
							"",
							"pm.test(\"Response has correct incident_type\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.incident_type).to.eql('Test Incident');",
							"});",
							"",
							"pm.test(\"Response has status Open\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('Open');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"date_time\": \"2025-09-02T14:30:00\",\n  \"location_id\": 1,\n  \"incident_type\": \"Test Incident\",\n  \"description\": \"This is a test incident for API validation\",\n  \"injury_severity\": \"Low\",\n  \"reporter_name\": \"Test Reporter\",\n  \"status\": \"Open\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/incidents",
					"host": ["{{baseUrl}}"],
					"path": ["api", "v1", "incidents"]
				}
			}
		},
		{
			"name": "Get Created Incident",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Incident exists and has correct data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.incident_type).to.eql('Test Incident');",
							"    pm.expect(jsonData.reporter_name).to.eql('Test Reporter');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/incidents/{{createdIncidentId}}",
					"host": ["{{baseUrl}}"],
					"path": ["api", "v1", "incidents", "{{createdIncidentId}}"]
				}
			}
		},
		{
			"name": "Update Incident Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status updated to In Progress\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('In Progress');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"In Progress\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/incidents/{{createdIncidentId}}",
					"host": ["{{baseUrl}}"],
					"path": ["api", "v1", "incidents", "{{createdIncidentId}}"]
				}
			}
		},
		{
			"name": "Get All Incidents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Array contains at least one incident\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/incidents?skip=0&limit=10",
					"host": ["{{baseUrl}}"],
					"path": ["api", "v1", "incidents"],
					"query": [
						{
							"key": "skip",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			}
		},
		{
			"name": "Delete Test Incident",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Deletion confirmation message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('deleted successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/incidents/{{createdIncidentId}}",
					"host": ["{{baseUrl}}"],
					"path": ["api", "v1", "incidents", "{{createdIncidentId}}"]
				}
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set timestamp for unique test data",
					"pm.environment.set('timestamp', Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test(\"Response time is reasonable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}
